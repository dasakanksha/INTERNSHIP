function rand(max) 
{
  return Math.floor(Math.random() * max);
}

function shuffle(a) 
{
  for (let i = a.length - 1; i > 0; i--) 
  {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

function changeBrightness(factor, sprite) 
{
  var virtCanvas = document.createElement("canvas");
  virtCanvas.breadth = 700;
  virtCanvas.height = 700;
  var context = virtCanvas.getContext("2d");
  context.drawImage(sprite, 0, 0, 700, 700);

  var imgData = context.getImageData(0, 0, 700, 700);

  for (let i = 0; i < imgData.data.length; i += 4) 
  {
    imgData.data[i] = imgData.data[i] * factor;
    imgData.data[i + 1] = imgData.data[i + 1] * factor;
    imgData.data[i + 2] = imgData.data[i + 2] * factor;
  }
  context.putImageData(imgData, 0, 0);

  var spriteOutput = new Image();
  spriteOutput.src = virtCanvas.toDataURL();
  virtCanvas.remove();
  return spriteOutput;
}

function displayVictoryMess(moves) 
{
  document.getElementById("moves").innerHTML = "You have crossed" + moves + " Steps.";
  toggleVisablity("incoming message");  
}

function toggleVisablity(id) 
{
  if (document.getElementById(id).style.visibility == "showing") 
  {
    document.getElementById(id).style.visibility = "hidden";
  }

  else

  {
    document.getElementById(id).style.visibility = "showing";
  }
}

function Maze(Breadth, Height) 
{
  var mazeMap;
  var breadth =Breadth ;
  var height = Height;
  var startCoord, endCoord;
  var dirs = ["north", "south", "east", "west"];
  var modDir = {
    north: 
    {
      y: -1,
      x: 0,
      o: "south"
    },
    south: 
    {
      y: 1,
      x: 0,
      o: "north"
    },
    east: 
    {
      y: 0,
      x: 1,
      o: "west"
    },
    west: 
    {
      y: 0,
      x: -1,
      o: "east"
    }
  };

  this.map = function() 
  {
    return mazeMap;
  };
  this.startCoord = function()
  {
    return startCoord;
  };
  this.endCoord = function() 
  {
    return endCoord;
  };

  function genMap() 
  {
    mazeMap = new Array(height);
    for (y = 0; y < height; y++) 
    {
      mazeMap[y] = new Array(breadth);
      for (x = 0; x < breadth; ++x) 
      {
        mazeMap[y][x] = {
          north: false,
          south: false,
          east: false,
          west: false,
          visited: false,
          priorPos: null
        };
      }
    }
  }

  function defineMaze() 
  {
    var isComp = false;
    var move = false;
    var cellsVisited = 1;
    var numLoops = 0;
    var maxLoops = 0;
    var pos = {
      x: 0,
      y: 0
    };
    var numCells = breadth * height;
    while (!isComp) 
    {
      move = false;
      mazeMap[pos.x][pos.y].visited = true;

      if (numLoops >= maxLoops)
      {
        shuffle(dirs);
        maxLoops = Math.round(rand(height / 10));
        numLoops = 0;
      }
      numLoops++;
      for (index = 0; index < dirs.length; index++) 
      {
        var direction = dirs[index];
        var nx = pos.x + modDir[direction].x;
        var ny = pos.y + modDir[direction].y;

        if (nx >= 0 && nx < breadth && ny >= 0 && ny < height) 
        {
          
          if (!mazeMap[nx][ny].visited) 
          {
            
            mazeMap[pos.x][pos.y][direction] = true;
            mazeMap[nx][ny][modDir[direction].o] = true;

            
            mazeMap[nx][ny].priorPos = pos;
            
            pos = {
              x: nx,
              y: ny
            };
            cellsVisited++;
           
            move = true;
            break;
          }
        }
      }

      if (!move) 
      {
       
        pos = mazeMap[pos.x][pos.y].priorPos;
      }
      if (numCells == cellsVisited) 
      {
        isComp = true;
      }
    }
  }

  function defineStartEnd() 
  {
    switch (rand(4)) 
    {
      case 0:
        startCoord = {
          x: 0,
          y: 0
        };
        endCoord = {
          x: height - 1,
          y: breadth - 1
        };
        break;
      case 1:
        startCoord = {
          x: 0,
          y: breadth - 1
        };
        endCoord = {
          x: height - 1,
          y: 0
        };
        break;
      case 2:
        startCoord = {
          x: height - 1,
          y: 0
        };
        endCoord = {
          x: 0,
          y: breadth - 1
        };
        break;
      case 3:
        startCoord = {
          x: height - 1,
          y: breadth - 1
        };
        endCoord = {
          x: 0,
          y: 0
        };
        break;
    }
  }

  genMap();
  defineStartEnd();
  defineMaze();
}

function DrawMaze(Maze, ctx, cellsize, endSprite = null) 
{
  var map = Maze.map();
  var cellSize = cellsize;
  var drawEndMethod;
  ctx.linebreadth = cellSize / 50;

  this.redrawMaze = function(size) 
  {
    cellSize = size;
    ctx.linebreadth = cellSize / 60;
    drawMap();
    drawEndMethod();
  };

  function drawCell(xCord, yCord, cell) 
  {
    var x = xCord * cellSize;
    var y = yCord * cellSize;

    if (cell.n == false) 
    {
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x + cellSize, y);
      ctx.stroke();
    }
    if (cell.s === false) 
    {
      ctx.beginPath();
      ctx.moveTo(x, y + cellSize);
      ctx.lineTo(x + cellSize, y + cellSize);
      ctx.stroke();
    }
    if (cell.e === false) 
    {
      ctx.beginPath();
      ctx.moveTo(x + cellSize, y);
      ctx.lineTo(x + cellSize, y + cellSize);
      ctx.stroke();
    }
    if (cell.w === false)
    {
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x, y + cellSize);
      ctx.stroke();
    }
  }

  function drawMap() 
  {
    for (x = 0; x < map.length; x++) 
    {
      for (y = 0; y < map[x].length; y++) 
      {
        drawCell(x, y, map[x][y]);
      }
    }
  }

  function drawEndFlag() 
  {
    var coord = Maze.endCoord();
    var gridSize = 4;
    var fraction = cellSize / gridSize - 2;
    var colorSwap = true;
    for (let y = 0; y < gridSize; y++) 
    {
      if (gridSize % 2 == 0) 
      {
        colorSwap = !colorSwap;
      }
      for (let x = 0; x < gridSize; x++) 
      {
        ctx.beginPath();
        ctx.rect(
          coord.x * cellSize + x * fraction + 4.5,
          coord.y * cellSize + y * fraction + 4.5,
          fraction,
          fraction
        );
        if (colorSwap) 
        {
          ctx.fillStyle = "rgba(0, 0, 0, 0.8)";
        }
        else
        {
          ctx.fillStyle = "rgba(355, 355, 355, 0.8)";
        }
        ctx.fill();
        colorSwap = !colorSwap;
      }
    }
  }

  function drawEndSprite()
  {
    var offsetLeft = cellSize / 100;
    var offsetRight = cellSize / 50;
    var coord = Maze.endCoord();
    ctx.drawImage(
      endSprite,
      2,
      2,
      endSprite.breadth,
      endSprite.height,
      coord.x * cellSize + offsetLeft,
      coord.y * cellSize + offsetLeft,
      cellSize - offsetRight,
      cellSize - offsetRight
    );
  }

  function clear()
  {
    var canvasSize = cellSize * map.length;
    ctx.clearRect(0, 0, canvasSize, canvasSize);
  }

  if (endSprite != null)
  {
    drawEndMethod = drawEndSprite;
  }
  else
  {
    drawEndMethod = drawEndFlag;
  }
  clear();
  drawMap();
  drawEndMethod();
}

function Player(maze, c, _cellsize, onComplete, sprite = null)
{
  var ctx = c.getContext("2d");
  var drawSprite;
  var moves = 0;
  drawSprite = drawSpriteCircle;
  if (sprite != null) 
  {
    drawSprite = drawSpriteImg;
  }
  var player = this;
  var map = maze.map();
  var cellCoords = {
    x: maze.startCoord().x,
    y: maze.startCoord().y
  };
  var cellSize = _cellsize;
  var halfCellSize = cellSize / 2;

  this.redrawPlayer = function(_cellsize) 
  {
    cellSize = _cellsize;
    drawSpriteImg(cellCoords);
  };

  function drawSpriteCircle(coord)
  {
    ctx.beginPath();
    ctx.fillStyle = "black";
    ctx.arc(
      (coord.x + 1) * cellSize - halfCellSize,
      (coord.y + 1) * cellSize - halfCellSize,
      halfCellSize - 2,
      0,
      2 * Math.PI
    );
    ctx.fill();
    if (coord.x === maze.endCoord().x && coord.y === maze.endCoord().y) 
    {
      onComplete(moves);
      player.unbindKeyDown();
    }
  }

  function drawSpriteImg(coord) 
  {
    var offsetLeft = cellSize / 100;
    var offsetRight = cellSize / 50;
    ctx.drawImage(
      sprite,
      0,
      0,
      sprite.breadth,
      sprite.height,
      coord.x * cellSize + offsetLeft,
      coord.y * cellSize + offsetLeft,
      cellSize - offsetRight,
      cellSize - offsetRight
    );
    if (coord.x === maze.endCoord().x && coord.y === maze.endCoord().y) 
    {
      onComplete(moves);
      player.unbindKeyDown();
    }
  }

  function removeSprite(coord) 
  {
    var offsetLeft = cellSize / 100;
    var offsetRight = cellSize / 50;
    ctx.clearRect(
      coord.x * cellSize + offsetLeft,
      coord.y * cellSize + offsetLeft,
      cellSize - offsetRight,
      cellSize - offsetRight
    );
  }

  function check(e) 
  {
    var cell = map[cellCoords.x][cellCoords.y];
    moves++;
    switch (e.keyCode) 
    {
      case 65:
      case 37: 
        if (cell.w == true) 
        {
          removeSprite(cellCoords);
          cellCoords = {
            x: cellCoords.x - 1,
            y: cellCoords.y
          };
          drawSprite(cellCoords);
        }
        break;
      case 87:
      case 38: 
        if (cell.n == true) {
          removeSprite(cellCoords);
          cellCoords = {
            x: cellCoords.x,
            y: cellCoords.y - 1
          };
          drawSprite(cellCoords);
        }
        break;
      case 68:
      case 39: 
        if (cell.e == true)
        {
          removeSprite(cellCoords);
          cellCoords = {
            x: cellCoords.x + 1,
            y: cellCoords.y
          };
          drawSprite(cellCoords);
        }
        break;
      case 83:
      case 40: 
        if (cell.s == true) 
        {
          removeSprite(cellCoords);
          cellCoords = {
            x: cellCoords.x,
            y: cellCoords.y + 1
          };
          drawSprite(cellCoords);
        }
        break;
    }
  }

  this.bindKeyDown = function() 
  {
    window.addEventListener("Keydown", check, false);

    $("#view").swipe({
      swipe: function(
        event,
        direction,
        distance,
        duration,
        fingerCount,
        fingerData,
      ) {
        console.log(direction);
        switch (direction) 
        {
          case "UP":
            check({
              keyCode: 38
            });
            break;
          case "DOWN":
            check({
              keyCode: 40
            });
            break;
          case "LEFT":
            check({
              keyCode: 37
            });
            break;
          case "RIGHT":
            check({
              keyCode: 39
            });
            break;
        }
      },
      threshold: 0
    });
  };

  this.unbindKeyDown = function()
  {
    window.removeEventListener("Keydown", check, false);
    $("#view").swipe("LOSS");
  };

  drawSprite(maze.startCoord());

  this.bindKeyDown();
}

var mazeCanvas = document.getElementById("MazeCanvas");
var ctx = mazeCanvas.getContext("2d");
var sprite;
var finishSprite;
var maze, draw, player;
var cellSize;
var difficulty;

window.onload = function() 
  {
  let viewbreadth = $("#view").breadth();
  let viewHeight = $("#view").height();
  if (viewHeight < viewbreadth)
  {
    ctx.canvas.breadth = viewHeight - viewHeight / 100;
    ctx.canvas.height = viewHeight - viewHeight / 100;
  }
  else
  {
    ctx.canvas.breadth = viewbreadth - viewbreadth / 100;
    ctx.canvas.height = viewbreadth - viewbreadth / 100;
  }

  var completeOne = false;
  var completeTwo = false;
  var isComplete = () =>
  {
    if(completeOne === true && completeTwo === true)
       {
         console.log("Run");
         setTimeout(function()
         {
           makeMaze();
         }, 700);         
       }
  };
  sprite = new Image();
  sprite.src =  "https://www.google.com/url?sa=i&url=https%3A%2F%2Ftomandjerry.fandom.com%2Fwiki%2FJerry_Mouse&psig=AOvVaw3gHxnRom8O82lZCSMohcjN&ust=1623005381752000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCPjXpYe8gvECFQAAAAAdAAAAABAD" +
    "?" +  new Date().getTime();
  sprite.setAttribute("crossOrigin", " ");
  sprite.onload = function()
  {
    sprite = changeBrightness(1.2, sprite);
    completeOne = true;
    console.log(completeOne);
    isComplete();
  };

  finishSprite = new Image();
  finishSprite.src = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fpixabay.com%2Fillustrations%2Ftom-jerry-cartoon-art-mickey-mouse-5158824%2F&psig=AOvVaw3hRxim6TuOWhZtb6GbwWgF&ust=1623005155341000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCPjF8py7gvECFQAAAAAdAAAAABAP"+
  "?" + new Date().getTime();
  finishSprite.setAttribute("crossOrigin", " ");
  finishSprite.onload = function()
  {
    finishSprite = changeBrightness(1.1, finishSprite);
    completeTwo = true;
    console.log(completeTwo);
    isComplete();
  };
  
};

window.onresize = function() 
{
  let viewbreadth = $("#view").breadth();
  let viewHeight = $("#view").height();
  if (viewHeight < viewbreadth)
  {
    ctx.canvas.breadth = viewHeight - viewHeight / 100;
    ctx.canvas.height = viewHeight - viewHeight / 100;
  } 
  else 
  {
    ctx.canvas.breadth = viewbreadth - viewbreadth / 100;
    ctx.canvas.height = viewbreadth - viewbreadth / 100;
  }
  cellSize = mazeCanvas.breadth / difficulty;
  if (player != null)
  {
    draw.redrawMaze(cellSize);
    player.redrawPlayer(cellSize);
  }
};

function makeMaze() 
{
  if (player != undefined) 
  {
    player.unbindKeyDown();
    player = null;
  }
  var e = document.getElementById("diffSelect");
  difficulty = e.options[e.selectedIndex].value;
  cellSize = mazeCanvas.breadth / difficulty;
  maze = new Maze(difficulty, difficulty);
  draw = new DrawMaze(maze, ctx, cellSize, finishSprite);
  player = new Player(maze, mazeCanvas, cellSize, displayVictoryMess, sprite);
  if (document.getElementById("mazeContainer").style.opacity < "100") 
  {
    document.getElementById("mazeContainer").style.opacity = "100";
  }
}
